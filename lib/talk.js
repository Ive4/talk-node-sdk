// Generated by CoffeeScript 1.7.1
(function() {
  var EventEmitter, Talk, apis, async, config, util, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  _ = require('lodash');

  async = require('async');

  config = require('./config');

  util = require('./util');

  apis = require('./apis');

  Talk = (function(_super) {
    __extends(Talk, _super);

    function Talk() {
      this.token = null;
    }

    Talk.prototype.init = function(_config) {
      if (_config == null) {
        _config = {};
      }
      config = _.extend(config, _config);
      return this;
    };

    Talk.prototype.subscribe = function() {};

    Talk.prototype.discover = function(callback) {
      var discoverUrl;
      if (callback == null) {
        callback = function() {};
      }
      discoverUrl = config.apiHost + '/v1/discover';
      util.request(discoverUrl, 'get', function(err, data) {
        if (err == null) {
          apis = _.extend(apis, data);
        }
        return callback(err, data);
      });
      return this;
    };

    Talk.prototype.auth = function(token) {
      var _talk;
      _talk = new Talk;
      _talk.token = token;
      return _talk;
    };

    Talk.prototype.call = function(api, params, callback) {
      var method, path, url, _ref;
      if (callback == null) {
        callback = function() {};
      }
      if (_.isEmpty(apis)) {
        return async.waterfall([
          (function(_this) {
            return function(next) {
              return _this.discover(next);
            };
          })(this), (function(_this) {
            return function(apis, next) {
              return _this.call(api, params, next);
            };
          })(this)
        ], callback);
      }
      if (apis[api] == null) {
        return callback(new Error('NO_SUCH_API'));
      }
      _ref = apis[api], path = _ref.path, method = _ref.method;
      url = config.apiHost + path.replace(/\:(.*)?\/?/i, function(m1, m2) {
        var _m2;
        _m2 = params[m2];
        delete params[m2];
        return _m2;
      });
      if (this.token) {
        params.token = this.token;
      }
      return util.request(url, method, params, callback);
    };

    return Talk;

  })(EventEmitter);

  module.exports = new Talk;

}).call(this);
