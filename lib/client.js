// Generated by CoffeeScript 1.7.1
(function() {
  var Client, path, util, _;

  _ = require('lodash');

  util = require('./util');

  path = require('path');

  Client = (function() {
    function Client(options) {
      var apiHost, clientId, clientSecret, map, _ref;
      this.options = options;
      _ref = this.options, apiHost = _ref.apiHost, clientId = _ref.clientId, clientSecret = _ref.clientSecret, map = _ref.map;
      _.keys(map).forEach((function(_this) {
        return function(key) {
          var getter, keys, _map;
          _map = map[key];
          getter = function(params, callback) {
            var has, matches, reqOptions, _path, _ref1;
            if (callback == null) {
              callback = function() {};
            }
            params.clientId = clientId;
            params.clientSecret = clientSecret;
            has = [];
            if (matches = _map.path.match(/\:[a-z_-]+/ig)) {
              has = has.concat(matches.map(function(str) {
                return str.slice(1);
              }));
            }
            if (((_ref1 = _map.has) != null ? _ref1.length : void 0) > 1) {
              has = has.concat(_map.has);
            }
            if (has.length > 1) {
              has.unshift(params);
              if (!_.has.apply(_, has)) {
                return callback(new Error("MISS PARAM " + (params.join(_map.has))));
              }
            }
            _path = _map.path.replace(/\:[a-z_-]+/ig, function(code) {
              var val;
              val = params[code.slice(1)];
              delete params[code.slice(1)];
              return val;
            });
            _map.method = _map.method.toUpperCase();
            reqOptions = {
              method: _map.method,
              uri: apiHost + _path
            };
            switch (_map.method) {
              case 'GET':
                reqOptions.qs = params;
                break;
              default:
                reqOptions.headers = {
                  "Content-Type": "application/json"
                };
                reqOptions.body = JSON.stringify(params);
            }
            return util.request(reqOptions, callback);
          };
          keys = key.split('.');
          if (keys.length === 1 || keys[1] === 'index') {
            return Object.defineProperty(_this, keys[0], {
              get: function() {
                return getter;
              }
            });
          } else if (keys.length === 2) {
            if (!_this[keys[0]]) {
              _this[keys[0]] = {};
            }
            return Object.defineProperty(_this[keys[0]], keys[1], {
              get: function() {
                return getter;
              }
            });
          }
        };
      })(this));
    }

    return Client;

  })();

  module.exports = Client;

}).call(this);
