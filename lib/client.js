// Generated by CoffeeScript 1.8.0
(function() {
  var Client, apis, async, config, logger, util, _;

  _ = require('lodash');

  async = require('async');

  logger = require('graceful-logger');

  apis = require('./apis');

  util = require('./util');

  config = require('./config');

  Client = (function() {
    function Client(token) {
      this.token = token != null ? token : null;
    }

    Client.prototype.auth = function(token) {
      this.token = token;
      return this;
    };

    Client.prototype.discover = function(callback) {
      var discoverUrl;
      if (callback == null) {
        callback = function() {};
      }
      discoverUrl = config.apiHost + '/v1/discover';
      util.request(discoverUrl, 'get', function(err, data) {
        if (err == null) {
          apis = _.extend(apis, data);
        }
        return callback(err, data);
      });
      return this;
    };

    Client.prototype.call = function(api, params, callback) {
      var method, path, url, _ref;
      if (callback == null) {
        callback = function() {};
      }
      if (_.isEmpty(apis)) {
        return async.waterfall([
          (function(_this) {
            return function(next) {
              return _this.discover(next);
            };
          })(this), (function(_this) {
            return function(apis, next) {
              return _this.call(api, params, next);
            };
          })(this)
        ], callback);
      }
      if (typeof params === 'function') {
        callback = params;
        params = {};
      }
      if (apis[api] == null) {
        return callback(new Error('NO_SUCH_API'));
      }
      _ref = apis[api], path = _ref.path, method = _ref.method;
      url = config.apiHost + path.split('/').map(function(k) {
        var _k;
        if (k[0] !== ':') {
          return k;
        }
        k = k.slice(1);
        _k = params[k];
        delete params[k];
        return _k;
      }).join('/');
      if (this.token) {
        params.token = this.token;
      }
      params.appToken = config.appToken;
      logger.info("send request: " + url);
      return util.request(url, method, params, callback);
    };

    return Client;

  })();

  module.exports = Client;

}).call(this);
