// Generated by CoffeeScript 1.8.0
(function() {
  var api, apiMap, async, config, maxRetryTimeout, retryTimes, util, _;

  _ = require('lodash');

  async = require('async');

  util = require('./util');

  config = require('./config');

  apiMap = {};

  retryTimes = 0;

  maxRetryTimeout = 60000;

  api = {
    ready: false,
    fetch: function(callback) {
      if (callback == null) {
        callback = function() {};
      }
      if (api.ready) {
        return callback(null, apiMap);
      }
      return api.refresh(function(err, apiMap) {
        var retryTimeout;
        if (err != null) {
          retryTimes += 1;
          retryTimeout = 100 * Math.pow(2, retryTimes);
          if (retryTimeout > maxRetryTimeout) {
            return callback(err);
          }
          return setTimeout(function() {
            return api.fetch(callback);
          }, retryTimeout);
        } else {
          retryTimes = 0;
          return callback(err, apiMap);
        }
      });
    },
    refresh: function(callback) {
      var discoverUrl;
      if (callback == null) {
        callback = function() {};
      }
      discoverUrl = config.apiHost + '/v1/discover';
      return util.request(discoverUrl, 'get', function(err, data) {
        if (data == null) {
          data = {};
        }
        if (err == null) {
          apiMap = _.extend(apiMap, data);
          api.ready = true;
        }
        return callback(err, apiMap);
      });
    },
    list: function(callback) {
      var beginAt;
      if (callback == null) {
        callback = function() {};
      }
      beginAt = Date.now();
      return async.until(function() {
        return api.ready;
      }, function(callback) {
        if ((Date.now() - beginAt) > maxRetryTimeout) {
          return callback(new Error('could not fetch the api list from server'));
        }
        return setTimeout(callback, 100);
      }, function(err) {
        return callback(err, apiMap);
      });
    }
  };

  module.exports = api;

}).call(this);
