// Generated by CoffeeScript 1.8.0
(function() {
  var EventEmitter, Service, express, json, logger, service,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  express = require('express');

  json = require('body-parser').json;

  logger = require('graceful-logger');

  Service = (function(_super) {
    __extends(Service, _super);

    function Service(app, options) {
      var prefix;
      this.app = app;
      if (options == null) {
        options = {};
      }
      this._emit = __bind(this._emit, this);
      this.app || (this.app = express());
      prefix = options.prefix;
      prefix || (prefix = '/');
      this.app.use(json());
      this.app.post(prefix, this._emit);
    }

    Service.prototype._emit = function(req, res, next) {
      var data, event, _ref;
      _ref = req.body || {}, event = _ref.event, data = _ref.data;
      res.end('PONG');
      if (!event) {
        return;
      }
      logger.info("emit event: " + event);
      this.emit(event, data);
      return this.emit('*', data);
    };

    Service.prototype.listen = function(port, callback) {
      if (callback == null) {
        callback = function() {};
      }
      this.app.listen(port, function(err) {
        logger.info("service listen on " + port);
        return callback(err);
      });
      return this;
    };

    return Service;

  })(EventEmitter);

  service = function(app, options) {
    if (options == null) {
      options = {};
    }
    return new Service(app, options);
  };

  module.exports = service;

}).call(this);
